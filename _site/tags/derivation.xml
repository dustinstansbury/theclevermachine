<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>The Clever Machine - derivation</title>
    <link href="/theclevermachine" rel="self"/>
    <link href="tagsderivation.html"/>
    <updated>2020-08-11T08:53:34-07:00</updated>
    <id>/theclevermachinederivation.html</id>

    <author>
        <name>Dustin Stansbury</name>
    </author>

    
        <entry>
            <title>Common Linear Algebra Identities</title>
            <link href="/theclevermachine/linear-algebra-identities"/>
            <updated>2020-08-05T00:00:00-07:00</updated>
            <id>/theclevermachine/linear-algebra-identities</id>
            <content type="html">&lt;p&gt;This post provides a convenient reference of Linear Algebra identities used in The Clever Machine Blog.&lt;/p&gt;

&lt;h1 id=&quot;notation&quot;&gt;Notation&lt;/h1&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}

\text{A Scalar:}&amp;\;\;\;a \\
\text{A Column Vector:}&amp;\;\;\;\mathbf{a} = [a_1, a_2, ...a_n]^T \\
\text{The } i\text{-th entry of a vector:}&amp;\;\;\;a_i \\
\text{Vector Inner (Scalar) Product:}&amp;\;\;\;\mathbf{a}^T\mathbf{a} \\
\text{Vector Outer (Matrix) Product:}&amp;\;\;\;\mathbf{a}\mathbf{a}^T \\

\\
\text{A Matrix:} &amp;\;\;\;\mathbf{A}&amp; \\
\text{The } i,j\text{-th entry of a matrix:}&amp;\;\;\;A_{ij} \\
\text{The Null Matrix (all zero entries):} &amp;\;\;\;\mathbf{0}&amp; \\
\text{The Identity Matrix:} &amp;\;\;\;\mathbf{I}&amp; \\
\text{A Diagonal Matrix:} &amp;\;\;\;\mathbf{\Lambda}&amp; \\
\text{A Positive Definite Matrix:} &amp;\;\;\;\mathbf{\Sigma} \\
\text{Matrix of size }\mathbf{A}\text{ filled with zeros except a single 1 at } i,j &amp;\;\;\;\mathbf{\Delta}(\mathbf{A})_{ij} \\

\\
\text{Matrix Transpose:}&amp;\;\;\;\mathbf{A}^T \\
\text{Matrix Identity:}&amp;\;\;\;\mathbf{A}^{-1} \\
\text{Matrix Pseudo Inverse:}&amp;\;\;\;\mathbf{A}^+ \\
\text{Matrix Square Root:}&amp;\;\;\;\mathbf{A}^{1/2} \\
\text{Matrix Complex Conjugate:}&amp;\;\;\;\mathbf{A}^* \\
\text{Hermitian of a Matrix:}&amp;\;\;\;\mathbf{A}^H \\
\text{Determinant of a Matrix:}&amp;\;\;\;\det(\mathbf{A}) \\
\text{Trace of a Matrix:}&amp;\;\;\;\text{tr}(\mathbf{A}) \\
\text{Diagonal Matrix:}&amp;\;\;\;\text{diag}(\mathbf{A}),  \;\;\; (\text{diag}(\mathbf{A}))_{ij} = \delta_{ij}(A)\\
\text{Eigenvalues of a Matrix:}&amp;\;\;\;\text{eig}(\mathbf{A}) \\
\text{Norm of a Matrix:}&amp;\;\;\;||\mathbf{A}|| \\ 
\text{Hadamard (elementwise) product of two Matrices:}&amp;\;\;\;\mathbf{A} \circ \mathbf{B} \\
\text{Kronecker Product of Two Matrices:}&amp;\;\;\;\mathbf{A} \otimes \mathbf{B} \\


\end{align} %]]&gt;&lt;/script&gt;

&lt;h1 id=&quot;1-basic-properties&quot;&gt;1. Basic Properties&lt;/h1&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
\mathbf{A} + \mathbf{B} &amp;=&amp; \mathbf{B} + \mathbf{A} \tag{1.1} \\
\mathbf{A} + (\mathbf{B} + \mathbf{C}) &amp;=&amp; (\mathbf{A} + \mathbf{B}) + \mathbf{C} \tag{1.2} \\
\mathbf{A} (\mathbf{B} + \mathbf{C}) &amp;=&amp; (\mathbf{AB} + \mathbf{AC}) \tag{1.3} \\
a(\mathbf{B} + \mathbf{C}) &amp;=&amp; (a\mathbf{B} + a\mathbf{C}) = (\mathbf{B}a + \mathbf{C}a) \tag{1.4} \\
\mathbf{AB} &amp;\neq&amp; \mathbf{BA} \tag{1.5} \\
\mathbf{ABC} &amp;=&amp; (\mathbf{AB})\mathbf{C} = \mathbf{A}(\mathbf{BC}) \tag{1.6} \\

\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;h1 id=&quot;2-transposes&quot;&gt;2. Transposes&lt;/h1&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
(\mathbf{A}^T)^T &amp;=&amp; \mathbf{A} \tag{2.1} \\
(\mathbf{AB})^T &amp;=&amp; \mathbf{B}^{T}\mathbf{A}^{T}  \tag{2.2} \\
(\mathbf{ABC})^T &amp;=&amp; \mathbf{C}^{T}\mathbf{B}^{T}\mathbf{A}^{T} \tag{2.3} \\
(\mathbf{A} + \mathbf{B})^T &amp;=&amp; (\mathbf{A}^T + \mathbf{B}^T) \tag{2.4} \\
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;h1 id=&quot;3-inverses-and-identity&quot;&gt;3. Inverses and Identity&lt;/h1&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
\mathbf{AI} &amp;=&amp; \mathbf{IA} = \mathbf{A}  \tag{3.1} \\
\mathbf{AA}^{-1} &amp;=&amp; \mathbf{A}^{-1}\mathbf{A} = \mathbf{I}  \tag{3.2} \\
(\mathbf{A}^{-1})^{-1} &amp;=&amp; \mathbf{A} \tag{3.3} \\
(\mathbf{AB})^{-1} &amp;=&amp; \mathbf{B}^{-1}\mathbf{A}^{-1}  \tag{3.4} \\
(\mathbf{ABC})^{-1} &amp;=&amp; \mathbf{C}^{-1}\mathbf{B}^{-1}\mathbf{A}^{-1}  \tag{3.5} \\
(\mathbf{A}^T)^{-1} &amp;=&amp; (\mathbf{A}^{-1})^T \tag{3.6} \\
\mathbf{\Lambda}^{-1}&amp;=&amp; \text{diag}([1/\lambda_1, 1/\lambda_2, ... 1/\lambda_n]) \tag{3.7} \\
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;h1 id=&quot;4-traces&quot;&gt;4. Traces&lt;/h1&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
\text{tr}(\mathbf{A}) &amp;=&amp; \sum_i A_{ii} \tag{4.1} \\
\text{tr}(\mathbf{A}^T) &amp;=&amp; \text{tr}(\mathbf{A}) \tag{4.2} \\
\text{tr}(\mathbf{AB}) &amp;=&amp; \text{tr}(\mathbf{BA}) \tag{if A &amp; B are the same size,  4.3} \\
&amp;=&amp; \text{tr}(\mathbf{B}^T\mathbf{A}^T) \tag{if A &amp; B are not the same size,  4.4} \\
\text{tr}(\mathbf{A} + \mathbf{B}) &amp;=&amp; \text{tr}(\mathbf{A}) + \text{tr}(\mathbf{B}) \tag{4.5} \\
\text{tr}(\mathbf{ABC}) &amp;=&amp; \text{tr}(\mathbf{BCA}) = \text{tr}(\mathbf{CAB}) \tag{4.6} \\
\mathbf{a}^T\mathbf{a} &amp;=&amp; \text{tr}(\mathbf{aa}^T) \tag{4.7} \\
\text{tr}(\mathbf{A}) &amp;=&amp; \sum_i \lambda_{i}, \;\;\; \lambda_i = \text{eig}(\mathbf{A})_i \tag{4.8} \\
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;h1 id=&quot;5-determinants&quot;&gt;5. Determinants&lt;/h1&gt;

&lt;p&gt;For a square matrix &lt;script type=&quot;math/tex&quot;&gt;\mathbf A&lt;/script&gt; of dimension &lt;script type=&quot;math/tex&quot;&gt;n \times n&lt;/script&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
\det(\mathbf{A}) &amp;=&amp; \prod_i \lambda_{i}, \;\;\; \lambda_i = \text{eig}(\mathbf{A})_i \tag{5.1} \\
\det(\mathbf{A}^T) &amp;=&amp; \det(\mathbf{A}) \tag{5.2} \\
\det(\mathbf{AB}) &amp;=&amp; \det(\mathbf{A})\det(\mathbf{B}) \tag{5.3} \\
\det(\mathbf{A}^{-1}) &amp;=&amp; \frac{1}{\det(\mathbf{A})} \tag{5.4} \\
\det(\mathbf{A}^n) &amp;=&amp; \det(\mathbf{A})^n \tag{5.5} \\
\det(c\mathbf{A}) &amp;=&amp; c^n \det(\mathbf{A}), \;\;\;  \text{given }  \mathbf{A} \in \mathbb{R}^{n \times n} \tag{5.6} \\

\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;h1 id=&quot;6-derivatives&quot;&gt;6. Derivatives&lt;/h1&gt;

&lt;h4 id=&quot;61-vector-derivatives&quot;&gt;6.1 Vector Derivatives&lt;/h4&gt;

&lt;h5 id=&quot;611-scalar-valued-objectives&quot;&gt;6.1.1 Scalar-valued Objectives&lt;/h5&gt;

&lt;p&gt;For scalar function &lt;script type=&quot;math/tex&quot;&gt;y = \mathbf{\beta x} = \beta_1 x_1 + \beta_2 x_2 + ... \beta_n x_n&lt;/script&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}

\frac{\partial y}{\partial \mathbf{x}} &amp;= 
\begin{bmatrix}
    \frac{\partial y}{\partial x_1} \\
    \frac{\partial y}{\partial x_2} \\
    \vdots \\
    \frac{\partial y}{\partial x_n} \\
\end{bmatrix}
= 
\frac{\partial \mathbf{\beta \mathbf{x}}}{\partial \mathbf{x}}
=
\begin{bmatrix}
    \frac{\partial \mathbf{\beta x}}{\partial x_1} \\
    \frac{\partial \mathbf{\beta x}}{\partial x_2} \\
    \vdots \\
    \frac{\partial \mathbf{\beta x}}{\partial x_n} \\
\end{bmatrix}
= 
\begin{bmatrix}
    \beta_1 \\
    \beta_2 \\
    \vdots \\
    \beta_n

\end{bmatrix} \tag{6.1.1}

\end{align} %]]&gt;&lt;/script&gt;

&lt;h5 id=&quot;612-vector-valued-objectives&quot;&gt;6.1.2 Vector-valued Objectives&lt;/h5&gt;

&lt;p&gt;For a vector-valued function&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}

\mathbf{y} = 
\begin{bmatrix}
    y_1 \\
    y_2 \\
    \vdots \\
    y_m \\
\end{bmatrix} = 

\mathbf{A x} =
\begin{bmatrix}
    a_{11}x_1 + a_{12}x_2 + ... + a_{1n}x_n \\
    a_{21}x_1 + a_{22}x_2 + ... + a_{2n}x_n \\
    \vdots \\
    a_{m1}x_1 + a_{m2}x_2 + ... + a_{mn}x_n \\
\end{bmatrix} \\ \\

\frac{\partial \mathbf{y}}{\partial \mathbf{x}} =

\begin{bmatrix}
    \frac{\partial y_1}{\partial x_1} &amp; \frac{\partial y_2}{\partial x_1} &amp; \dots  &amp; \frac{\partial y_m}{\partial x_1} \\
    \frac{\partial y_1}{\partial x_2} &amp; \frac{\partial y_2}{\partial x_2} &amp; \dots  &amp; \frac{\partial y_m}{\partial x_2} \\
    \vdots &amp; \vdots  &amp;  \ddots  &amp;  \vdots \\
    \frac{\partial y_1}{\partial x_n} &amp; \frac{\partial y_2}{\partial x_n} &amp; \dots  &amp; \frac{\partial y_m}{\partial x_n} \\
\end{bmatrix}  

= 

\frac{\partial \mathbf{Ax}}{\partial \mathbf{x}}

= 

\begin{bmatrix}
    a_{11} &amp; a_{21} &amp; \dots &amp; a_{m1} \\
    a_{12} &amp; a_{22} &amp; \dots &amp; a_{m2} \\
    \vdots &amp; \vdots &amp; \ddots &amp;  \vdots \\
    a_{1n} &amp; a_{2n} &amp; \dots  &amp; a_{mn} \\
\end{bmatrix}
= \mathbf{A}^T  \tag{6.1.2}

\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
\frac{\partial \mathbf{x}^T\mathbf{A}}{\partial \mathbf{x}} &amp;=&amp; \mathbf{A} \tag{6.1.3} \\
\frac{\partial \mathbf{x}^T\mathbf{a}}{\partial \mathbf{x}} &amp;=&amp; \frac{\partial \mathbf{a}^T\mathbf{x}}{\partial \mathbf{x}} = \mathbf{a} \tag{6.1.3} \\
\frac{\partial \mathbf{y}^T \mathbf{Ax}}{\partial \mathbf{x}} &amp;=&amp;  \mathbf{A}^T \mathbf{y} \tag{6.1.4} \\
\frac{\partial \mathbf{y}^T \mathbf{Ax}}{\partial \mathbf{y}} &amp;=&amp;  \mathbf{A} \mathbf{x} \tag{6.1.5} \\
\frac{\partial \mathbf{x}^T\mathbf{x}}{\partial \mathbf{x}} &amp;=&amp;  2\mathbf{x} \tag{6.1.6} \\
\frac{\partial \mathbf{x}^T\mathbf{Ax}}{\partial \mathbf{x}} &amp;=&amp;  (\mathbf{A} + \mathbf{A}^T)\mathbf{x} \tag{6.1.7} \\
&amp;=&amp;2 \mathbf{Ax} \tag{if A is symmetric, 6.1.8} \\

\frac{\partial \mathbf{Ax}}{\partial \mathbf{z}} &amp;=&amp; \frac{\partial \mathbf{x}}{\partial \mathbf{z}} \mathbf{A}^T \tag{6.1.9} \\
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;h4 id=&quot;62-matrix-derivatives&quot;&gt;6.2 Matrix Derivatives&lt;/h4&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
\frac{\partial \mathbf{X}}{\partial X_{ij}} &amp;=&amp; \mathbf{\Delta}(\mathbf{X})_{ij} \tag{6.2.1}  \\
\frac{\partial \mathbf{a}^T\mathbf{X} \mathbf{a}}{\partial \mathbf{X}} &amp;=&amp; \frac{\partial \mathbf{a}^T\mathbf{X}^T \mathbf{a}}{\partial \mathbf{X}} = \mathbf{a}\mathbf{a}^T \tag{6.2.2} \\
\frac{\partial \mathbf{a}^T\mathbf{X} \mathbf{b}}{\partial \mathbf{X}} &amp;=&amp; \mathbf{a}\mathbf{b}^T \tag{6.2.3} \\
\frac{\partial \mathbf{a}^T\mathbf{X}^T \mathbf{b}}{\partial \mathbf{X}} &amp;=&amp; \mathbf{b}\mathbf{a}^T \tag{6.2.4} \\
\frac{\partial \mathbf{X}^T \mathbf{BX}}{\partial \mathbf{X}} &amp;=&amp; (\mathbf{B} + \mathbf{B}^T)\mathbf{X} \tag{6.2.5}  \\

\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.math.uwaterloo.ca/~hwolkowi/matrixcookbook.pdf&quot;&gt;The Matrix Cookbook, Peterson &amp;amp; Pederson (2012)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
        </entry>
    
        <entry>
            <title>Derivation: Ordinary Least Squares Solution and the Normal Equations</title>
            <link href="/theclevermachine/derivation-normal-equations"/>
            <updated>2020-07-23T00:00:00-07:00</updated>
            <id>/theclevermachine/derivation-normal-equations</id>
            <content type="html">&lt;p&gt;Have you ever performed linear regression involving multiple predictor variables and run into this expression &lt;script type=&quot;math/tex&quot;&gt;\hat \beta = (X^TX)^{-1}X^Ty&lt;/script&gt;? It’s called the OLS solution via Normal Equations. To find out where it comes from, read on!&lt;/p&gt;

&lt;p&gt;In the linear regression framework, we model an output variable &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; (in this case a scalar) as a linear combination of some independent input variables &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; plus some independent noise &lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt;. The linear combination of the independent variables is defined by a parameter vector &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;y = X \beta + \epsilon&lt;/script&gt;

&lt;p&gt;We also assume that the noise term &lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt; is drawn from a Normal distribution with zero mean and a noise variance &lt;script type=&quot;math/tex&quot;&gt;\sigma_{\epsilon}^2&lt;/script&gt; (generally assumed to be equal to one):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\epsilon \sim N(0,\sigma_{\epsilon}^2)&lt;/script&gt;

&lt;p&gt;For some estimate of the model parameters &lt;script type=&quot;math/tex&quot;&gt;\hat \beta&lt;/script&gt;, the model’s prediction errors (a.k.a. &lt;em&gt;residuals&lt;/em&gt;) &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt; are the difference between the model prediction and the observed ouput values:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;e = y - X\hat \beta&lt;/script&gt;

&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Ordinary_least_squares&quot;&gt;Ordinary Least Squares (OLS) solution&lt;/a&gt; to the problem–i.e. determining an optimal solution for &lt;script type=&quot;math/tex&quot;&gt;\hat \beta&lt;/script&gt;–requires minimizing the sum of the squared errors with respect to the model parameters &lt;script type=&quot;math/tex&quot;&gt;\hat \beta&lt;/script&gt;. It turns out, the sum of squared errors &lt;a href=&quot;https://en.wikipedia.org/wiki/Dot_product&quot;&gt;is equal to the inner product of the residuals vector with itself&lt;/a&gt; &lt;script type=&quot;math/tex&quot;&gt;\sum_i e_i^2 = e^Te&lt;/script&gt; :&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
 e^T e &amp;= (y - X \hat \beta)^T (y - X \hat \beta) \\  
 &amp;= y^Ty - y^T (X \hat \beta) - (X \hat \beta)^T y + (X \hat \beta)^T (X \hat \beta) \\
 &amp;= y^Ty - (X \hat \beta)^T y - (X \hat \beta)^T y + (X \hat \beta)^T (X \hat \beta) \\
 &amp;= y^Ty - 2(X \hat \beta)^T y + (X \hat \beta)^T (X \hat \beta) \\
 &amp;= y^Ty - 2\hat \beta^T X^T y + \hat \beta^T X^T X \hat \beta \text{,} \tag{1}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;where we take advantage of the matrix identity &lt;script type=&quot;math/tex&quot;&gt;(AB)^T = B^TA^T&lt;/script&gt; in steps 2-3 above.&lt;/p&gt;

&lt;p&gt;To determine the parameters &lt;script type=&quot;math/tex&quot;&gt;\hat \beta&lt;/script&gt; we minimize the sum of squared errors with respect to the parameters:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial}{\partial \beta} \left[ e^T e \right] &amp;= 0 \\
\frac{\partial}{\partial \beta}  \left[ y^Ty - 2\hat \beta^T X^T y + \hat \beta^T X^T X \hat \beta \right ] &amp;= 0 \;\; \text{, via Eq. (1)}\\
-2X^Ty + 2X^TX \hat \beta &amp;= 0 \\ 
-X^Ty + X^TX \hat \beta &amp;= 0 \\ 
X^TX \hat \beta&amp;= X^Ty  \text{,} \tag{2}

\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;where we note to the matrix derivative identity &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial \mathbf{a}^T \mathbf{b}}{\partial \mathbf{a}} = \mathbf{b}&lt;/script&gt;, for vectors &lt;script type=&quot;math/tex&quot;&gt;\mathbf{a}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\mathbf{b}&lt;/script&gt; in step 2-3 above.&lt;/p&gt;

&lt;p&gt;The relationship in &lt;strong&gt;&lt;em&gt;Equation 2&lt;/em&gt;&lt;/strong&gt; is the matrix form of what are known as the &lt;a href=&quot;https://mathworld.wolfram.com/NormalEquation.html&quot;&gt;Normal Equations&lt;/a&gt;. Solving for &lt;script type=&quot;math/tex&quot;&gt;\hat \beta&lt;/script&gt; gives the analytical solution to the Ordinary Least Squares problem.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat \beta = (X^TX)^{-1}X^Ty&lt;/script&gt;

&lt;p&gt;…and voila!&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;notes&quot;&gt;Notes&lt;/h1&gt;
&lt;p&gt;This post is a refactor of content with the same title originally posted on &lt;a href=&quot;https://theclevermachine.wordpress.com/2012/09/01/derivation-of-ols-normal-equations/&quot;&gt;The Clever Machine Wordpress blog&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Supplemental Proof: The Expected Value of a Squared Random Variable</title>
            <link href="/theclevermachine/supplemental-lemma-expectation-x-squared"/>
            <updated>2020-07-19T00:00:00-07:00</updated>
            <id>/theclevermachine/supplemental-lemma-expectation-x-squared</id>
            <content type="html">&lt;p&gt;We want to show the following relationship:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbb E[X^2] = \mathbb E[(X - \mathbb E[X])^2] + \mathbb E[X]^2 \tag{1}&lt;/script&gt;

&lt;p&gt;If we expand the first expression on the right-hand side of &lt;strong&gt;&lt;em&gt;Equation 1&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\mathbb E [(X - \mathbb E[X])^2] &amp;= \mathbb E[X^2-2X\mathbb E[X]+\mathbb E [X]^2] \\
&amp;= \mathbb E[X^2] - 2\mathbb E[X] \mathbb E [\mathbb E [X]] + \mathbb E [\mathbb E [X]^2]. \tag{2}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;If we note that &lt;script type=&quot;math/tex&quot;&gt;\mathbb E[X]&lt;/script&gt; is a constant, then &lt;script type=&quot;math/tex&quot;&gt;\mathbb E[\mathbb E[X]]&lt;/script&gt; is also a constant, namely &lt;script type=&quot;math/tex&quot;&gt;\mathbb E[X]&lt;/script&gt;. Taking this into account &lt;strong&gt;&lt;em&gt;Equation 2&lt;/em&gt;&lt;/strong&gt; simplifies to:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\mathbb E[(X - \mathbb E[X])^2] &amp;= \mathbb E[X^2] - 2\mathbb E[X] \mathbb E[X] + \mathbb E[X]^2 \\
&amp;= \mathbb E[X^2] - 2\mathbb E[X]^2 + \mathbb E[X]^2 \\
&amp;= \mathbb E[X^2] - \mathbb E[X]^2 \tag{3}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Plugging &lt;strong&gt;&lt;em&gt;Equation 3&lt;/em&gt;&lt;/strong&gt; back into the right-hand side of &lt;strong&gt;&lt;em&gt;Equation 1&lt;/em&gt;&lt;/strong&gt; gives&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\mathbb E[(X - \mathbb E[X])^2] + \mathbb E[X]^2 &amp;= \mathbb E[X^2] - \mathbb E[X]^2 + \mathbb E[X]^2 \\
&amp;= \mathbb E[X^2] , \tag{4}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;thus giving the desired result.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Derivation: Derivatives for Common Neural Network Activation Functions</title>
            <link href="/theclevermachine/derivation-common-neural-network-activation-functions"/>
            <updated>2020-06-29T00:00:00-07:00</updated>
            <id>/theclevermachine/derivation-common-neural-network-activation-functions</id>
            <content type="html">&lt;p&gt;When constructing Artificial Neural Network (ANN) models, one of the primary considerations is choosing activation functions for hidden and output layers that are differentiable. This is because calculating the backpropagated error signal that is used to determine ANN parameter updates requires the gradient of the activation function gradient . Three of the most commonly-used activation functions used in ANNs are the identity function, the logistic sigmoid function, and the hyperbolic tangent function. Examples of these functions and their associated gradients (derivatives in 1D) are plotted in Figure 1.&lt;/p&gt;

&lt;hr /&gt;
&lt;center&gt;
    &lt;br /&gt;
    &lt;div id=&quot;container&quot;&gt;
        &lt;img width=&quot;800&quot; src=&quot;assets/images/a-gentle-introduction-to-neural-networks/common_activation_functions.png&quot; /&gt;
    &lt;/div&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Figure 1:&lt;/em&gt;&lt;/strong&gt; Common activation functions functions used in artificial neural, along with their derivatives&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In the remainder of this post, we derive the derivatives/gradients for each of these common activation functions.&lt;/p&gt;

&lt;h1 id=&quot;the-identity-activation-function&quot;&gt;The Identity Activation Function&lt;/h1&gt;

&lt;p&gt;The simplest activation function, one that is commonly used for the output layer activation function in regression problems,  is the identity/linear activation function (&lt;strong&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/strong&gt;, red curves):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g_{linear}(z) = z&lt;/script&gt;

&lt;p&gt;This activation function simply maps the pre-activation to itself and can output values that range &lt;script type=&quot;math/tex&quot;&gt;(-\infty, \infty)&lt;/script&gt;. Why would one want to do use an identity activation function? After all, a multi-layered network with linear activations at each layer can be equally-formulated as a single-layered linear network. It turns out that the identity activation function is surprisingly useful. For example, a multi-layer network that has nonlinear activation functions amongst the hidden units and an output layer that uses the identity activation function implements a powerful form of nonlinear regression. Specifically, the network can predict continuous target values using a linear combination of signals that arise from one or more layers of nonlinear transformations of the input.&lt;/p&gt;

&lt;p&gt;The derivative of &lt;script type=&quot;math/tex&quot;&gt;g_{\text{linear}}&lt;/script&gt; ,  &lt;script type=&quot;math/tex&quot;&gt;g'_{\text{linear}}&lt;/script&gt;,  is simply 1, in the case of 1D inputs. For vector inputs of length D the gradient is &lt;script type=&quot;math/tex&quot;&gt;\vec{1}^{1 \times D}&lt;/script&gt;, a vector of ones of length D.&lt;/p&gt;

&lt;h1 id=&quot;the-logistic-sigmoid-activation-function&quot;&gt;The Logistic Sigmoid Activation Function&lt;/h1&gt;

&lt;p&gt;Another function that is often used as the output activation function for binary classification problems (i.e. outputs values that range (0, 1)), is the logistic sigmoid (&lt;strong&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/strong&gt;, blue curves). The logistic sigmoid has the following form:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{rcl} g_{\text{logistic}}(z) = \frac{1}{1 + e^{-z}}\end{array}&lt;/script&gt;

&lt;p&gt;and outputs values that range (0, 1). The logistic sigmoid is motivated somewhat by biological neurons and can be interpreted as the probability of an artificial neuron “firing” given its inputs. (It turns out that the logistic sigmoid can also be derived as the maximum likelihood solution to for logistic regression in statistics). Calculating the derivative of the logistic sigmoid function makes use of the quotient rule and a clever trick that both adds and subtracts a one from the numerator:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl} g'_{\text{logistic}}(z) &amp;=&amp; \frac{\partial}{\partial z} \left ( \frac{1}{1 + e^{-z}}\right ) \\  &amp;=&amp; \frac{e^{-z}}{(1 + e^{-z})^2} \text{(by chain rule)} \\  &amp;=&amp; \frac{1 + e^{-z} - 1}{(1 + e^{-z})^2} \\  &amp;=&amp; \frac{1 + e^{-z}}{(1 + e^{-z})^2} - \left ( \frac{1}{1+e^{-z}} \right )^2 \\  &amp;=&amp; \frac{1}{(1 + e^{-z})} - \left ( \frac{1}{1+e^{-z}} \right )^2 \\  &amp;=&amp; g_{\text{logistic}}(z)- g_{\text{logistic}}(z)^2 \\  &amp;=&amp; g_{\text{logistic}}(z)(1 - g_{\text{logistic}}(z)) \end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;Here we see that &lt;script type=&quot;math/tex&quot;&gt;g'_{logistic}(z)&lt;/script&gt; evaluated at &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; is simply &lt;script type=&quot;math/tex&quot;&gt;g_{logistic}(z)&lt;/script&gt; weighted by &lt;script type=&quot;math/tex&quot;&gt;(1-g_{logistic}(z))&lt;/script&gt;. This turns out to be a convenient form for efficiently calculating gradients used in neural networks: if one keeps in memory the feed-forward activations of the logistic function for a given layer, the gradients for that layer can be evaluated using simple multiplication and subtraction rather than performing any re-evaluating the sigmoid function, which requires extra exponentiation.&lt;/p&gt;

&lt;h1 id=&quot;the-hyperbolic-tangent-activation-function&quot;&gt;The Hyperbolic Tangent Activation Function&lt;/h1&gt;

&lt;p&gt;Though the logistic sigmoid has a nice biological interpretation, it turns out that the logistic sigmoid can cause a neural network to get “stuck” during training. This is due in part to the fact that if a strongly-negative input is provided to the logistic sigmoid, it outputs values very near zero. Since neural networks use the feed-forward activations to calculate parameter gradients (again, see this &lt;a href=&quot;https://theclevermachine.wordpress.com/2014/09/06/derivation-error-backpropagation-gradient-descent-for-neural-networks/&quot;&gt;this post&lt;/a&gt; for details), this can result in model parameters that are updated less regularly than we would like, and are thus “stuck” in their current state.&lt;/p&gt;

&lt;p&gt;An alternative to the logistic sigmoid is the hyperbolic tangent, or &lt;script type=&quot;math/tex&quot;&gt;\text{tanh}&lt;/script&gt; function (&lt;strong&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/strong&gt;, green curves):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl} g_{\text{tanh}}(z) &amp;=&amp; \frac{\text{sinh}(z)}{\text{cosh}(z)} \\  &amp;=&amp; \frac{\mathrm{e}^z - \mathrm{e}^{-z}}{\mathrm{e}^z + \mathrm{e}^{-z}}\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;Like the logistic sigmoid, the tanh function is also sigmoidal (“s”-shaped), but instead outputs values that range &lt;script type=&quot;math/tex&quot;&gt;(-1, 1)&lt;/script&gt;. Thus strongly negative inputs to the tanh will map to negative outputs. Additionally, only zero-valued inputs are mapped to near-zero outputs. These properties make the network less likely to get “stuck” during training. Calculating the gradient for the tanh function also uses the quotient rule:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl} g'_{\text{tanh}}(z) &amp;=&amp; \frac{\partial}{\partial z} \frac{\text{sinh}(z)}{\text{cosh}(z)} \\  &amp;=&amp; \frac{\frac{\partial}{\partial z} \text{sinh}(z) \times \text{cosh}(z) - \frac{\partial}{\partial z} \text{cosh}(z) \times \text{sinh}(z)}{\text{cosh}^2(z)} \\  &amp;=&amp; \frac{\text{cosh}^2(z) - \text{sinh}^2(z)}{\text{cosh}^2(z)} \\  &amp;=&amp; 1 - \frac{\text{sinh}^2(z)}{\text{cosh}^2(z)} \\  &amp;=&amp; 1 - \text{tanh}^2(z)\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;Similar to the derivative for the logistic sigmoid, the derivative of &lt;script type=&quot;math/tex&quot;&gt;g_{\text{tanh}}(z)&lt;/script&gt; is a function of feed-forward activation evaluated at z, namely &lt;script type=&quot;math/tex&quot;&gt;(1-g_{\text{tanh}}(z)^2)&lt;/script&gt;. Thus the same caching trick can be used for layers that implement &lt;script type=&quot;math/tex&quot;&gt;\text{tanh}&lt;/script&gt; activation functions.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;In this post we reviewed a few commonly-used activation functions in neural network literature and their derivative calculations. These activation functions are motivated by biology and/or provide some handy implementation tricks like calculating derivatives using cached feed-forward activation values. Note that there are also many other options for activation functions not covered here: e.g. rectification, soft rectification, polynomial kernels, etc. Indeed, finding and evaluating novel activation functions is an active subfield of machine learning research. However, the three basic activations covered here can be used to solve a majority of the machine learning problems one will likely face.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;
</content>
        </entry>
    
        <entry>
            <title>Derivation: Error Backpropagation & Gradient Descent for Neural Networks</title>
            <link href="/theclevermachine/derivation-backpropagation"/>
            <updated>2020-06-29T00:00:00-07:00</updated>
            <id>/theclevermachine/derivation-backpropagation</id>
            <content type="html">&lt;p&gt;Artificial neural networks (ANNs) are a powerful class of models used for nonlinear regression and classification tasks that are motivated by biological neural computation. The general idea behind ANNs is pretty straightforward: map some input onto a desired target value using a distributed cascade of nonlinear transformations (see &lt;strong&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/strong&gt;). However, for many, myself included, the learning algorithm used to train ANNs can be difficult to get your head around at first. In this post I give a step-by-step walkthrough of the derivation of the gradient descent algorithm commonly used to train ANNs–aka the “backpropagation” algorithm. Along the way, I’ll also try to provide some high-level insights into the computations being performed during learning&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h1 id=&quot;some-background-and-notation&quot;&gt;Some Background and Notation&lt;/h1&gt;

&lt;p&gt;An ANN consists of an input layer, an output layer, and any number (including zero) of hidden layers situated between the input and output layers. &lt;strong&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/strong&gt; diagrams an ANN with a single hidden layer. The feed-forward computations performed by the ANN are as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The signals from the input layer &lt;script type=&quot;math/tex&quot;&gt;a_i&lt;/script&gt; are multiplied by a set of &lt;script type=&quot;math/tex&quot;&gt;w_{ij}&lt;/script&gt; connecting each input to a node in the hidden layer.&lt;/li&gt;
  &lt;li&gt;These weighted signals are then summed (indicated by &lt;script type=&quot;math/tex&quot;&gt;\sum&lt;/script&gt; in &lt;strong&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/strong&gt;) and combined with a bias &lt;script type=&quot;math/tex&quot;&gt;b_i&lt;/script&gt; (not displayed in &lt;strong&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/strong&gt;). This calculation forms the pre-activation signal &lt;script type=&quot;math/tex&quot;&gt;z_j = b_j + \sum_i a_i w_{ij}&lt;/script&gt; for the hidden layer.&lt;/li&gt;
  &lt;li&gt;The pre-activation signal is then transformed by the hidden layer activation function &lt;script type=&quot;math/tex&quot;&gt;g_j&lt;/script&gt; to form the feed-forward activation signals &lt;script type=&quot;math/tex&quot;&gt;a_j&lt;/script&gt; leaving leaving the hidden layer.&lt;/li&gt;
  &lt;li&gt;In a similar fashion, the hidden layer activation signals &lt;script type=&quot;math/tex&quot;&gt;a_j&lt;/script&gt; are multiplied by the weights connecting the hidden layer to the output layer &lt;script type=&quot;math/tex&quot;&gt;w_{jk}&lt;/script&gt;, summed, and a bias &lt;script type=&quot;math/tex&quot;&gt;b_k&lt;/script&gt; is added.&lt;/li&gt;
  &lt;li&gt;The resulting output layer pre-activation &lt;script type=&quot;math/tex&quot;&gt;z_k&lt;/script&gt; is transformed by the output activation function &lt;script type=&quot;math/tex&quot;&gt;g_k&lt;/script&gt; to form the network output &lt;script type=&quot;math/tex&quot;&gt;a_k&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;The computed output &lt;script type=&quot;math/tex&quot;&gt;a_k&lt;/script&gt; is then compared to a desired target value &lt;script type=&quot;math/tex&quot;&gt;t_k&lt;/script&gt; and the error between &lt;script type=&quot;math/tex&quot;&gt;a_k&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;t_k&lt;/script&gt; is calculated. This error is used to determine how to update model parameters, as we’ll discuss in the remainder of the post&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;center&gt;
    &lt;br /&gt;
    &lt;div id=&quot;container&quot;&gt;
        &lt;img width=&quot;500&quot; src=&quot;assets/images/a-gentle-introduction-to-neural-networks/multi-layer-perceptron.png&quot; /&gt;
    &lt;/div&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/strong&gt;: &lt;em&gt;Diagram of an artificial neural network with a single hidden layer (bias units not shown)&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Training a neural network involves determining the set of parameters &lt;script type=&quot;math/tex&quot;&gt;\mathbf{\theta} = \{\mathbf{W},\mathbf{b}\}&lt;/script&gt; that reduces the amount errors that the network makes. Often the choice for the error function is the &lt;a href=&quot;/theclevermachine/cutting-your-losses&quot;&gt;sum of the squared errors&lt;/a&gt; between the target values &lt;script type=&quot;math/tex&quot;&gt;t_k&lt;/script&gt; and the network output &lt;script type=&quot;math/tex&quot;&gt;a_k&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align} E &amp;= \frac{1}{2} \sum_{k=1}^K(a_k - t_k)^2 \tag{1} \end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Where &lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt; is the dimensionality of the target/output for a single observation. This parameter optimization problem can be solved using gradient descent, which requires determining &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial E}{\partial \theta}&lt;/script&gt; for all &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; in the model.&lt;/p&gt;

&lt;p&gt;Before we begin, let’s define the notation that will be used in remainder of the derivation. Please refer to &lt;strong&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/strong&gt; for any clarifications.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;{z_j}&lt;/script&gt;: input to node &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; in layer &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;{g_j}&lt;/script&gt;: activation function for node &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; in layer &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt; (applied to &lt;script type=&quot;math/tex&quot;&gt;{z_j}&lt;/script&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;a_j=g_j(z_j)&lt;/script&gt;: the output/activation of node &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; in layer &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;{b_{j}}&lt;/script&gt;: bias/offset for unit &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; in layer &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;{w_{ij}}&lt;/script&gt;: weights connecting node &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; in layer &lt;script type=&quot;math/tex&quot;&gt;(l-1)&lt;/script&gt; to node &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; in layer &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;{t_{k}}&lt;/script&gt;: target value for node &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; in the output layer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also note that the parameters for an ANN can be broken up into two distinct sets: those parameters that are associated with the output layer (i.e. &lt;script type=&quot;math/tex&quot;&gt;\theta_k = \{w_{jk}, b_k\}&lt;/script&gt;), and thus directly affect the network output error; and the remaining parameters that are associated with the hidden layer(s), and thus affect the output error indirectly. We’ll first derive the gradients for the output layer parameters, then extend these results to the hidden layer parameters.&lt;/p&gt;

&lt;h1 id=&quot;gradients-for-output-layer-parameters&quot;&gt;Gradients for Output Layer Parameters&lt;/h1&gt;

&lt;h4 id=&quot;output-layer-connection-weights-w_jk&quot;&gt;Output layer connection weights, &lt;script type=&quot;math/tex&quot;&gt;w_{jk}&lt;/script&gt;&lt;/h4&gt;

&lt;p&gt;Since the output layer parameters directly affect the value of the error function, determining the gradient of the error function with respect to those parameters is fairly straight-forward using an application of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Chain_rule&quot;&gt;chain rule&lt;/a&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial E }{\partial w_{jk}} &amp;= \frac{1}{2} \sum_{k}(a_k - t_k)^2 \\  
&amp;= (a_k - t_k)\frac{\partial}{\partial w_{jk}}(a_k - t_k) \tag{2}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;The derivative with respect to &lt;script type=&quot;math/tex&quot;&gt;t_k&lt;/script&gt; is zero because it does not depend on &lt;script type=&quot;math/tex&quot;&gt;w_{jk}&lt;/script&gt;. We can also use the fact that &lt;script type=&quot;math/tex&quot;&gt;a_k = g(z_k)&lt;/script&gt;, and re-apply the chain rule to give&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}\frac{\partial E }{\partial w_{jk}} &amp;= (a_k - t_k)\frac{\partial}{\partial w_{jk}}a_k \\
&amp;= (a_k - t_k)\frac{\partial}{\partial w_{jk}}g_k(z_k) \\
&amp;= (a_k - t_k)g_k'(z_k)\frac{\partial}{\partial w_{jk}}z_k \tag{3}
\end{align} %]]&gt;&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Now, recall that &lt;script type=&quot;math/tex&quot;&gt;z_k = b_k + \sum_j g_j(z_j)w_{jk}&lt;/script&gt; and thus &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial z_{k}}{\partial w_{jk}} = g_j(z_j) = a_j&lt;/script&gt;, thus giving us:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align} \frac{\partial E }{\partial w_{jk}} &amp;= \color{red}{(a_k - t_k)}\color{blue}{g_k'(z_k)}\color{green}{a_j} \end{align} \tag{4} %]]&gt;&lt;/script&gt;

&lt;p&gt;From *Equation 4 we can see that the gradient of the error function with respect to the output layer weights &lt;script type=&quot;math/tex&quot;&gt;w_{jk}&lt;/script&gt; is a product of three terms:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\color{red}{(a_k - t_k)}&lt;/script&gt;: the difference between the network output &lt;script type=&quot;math/tex&quot;&gt;a_k&lt;/script&gt; and the target value &lt;script type=&quot;math/tex&quot;&gt;t_k&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\color{blue}{g_k'(z_k)}&lt;/script&gt;: the derivative of output layer activation function &lt;script type=&quot;math/tex&quot;&gt;g_k()&lt;/script&gt;. For more details on activation function derivatives, please refer to &lt;a href=&quot;/theclevermachine/derivation-common-neural-network-activation-functions&quot;&gt;this post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\color{green}{a_j}&lt;/script&gt;: the activation signal of node &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; from the hidden layer feeding into the output layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we define &lt;script type=&quot;math/tex&quot;&gt;\delta_k&lt;/script&gt; to be all the terms that involve index &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\color{purple}{\delta_k} = \color{red}{(a_k - t_k)}\color{blue}{g_k'(z_k)} \tag{5}&lt;/script&gt;

&lt;p&gt;Then we get the “delta form” of the error function gradient for the output layer weights:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial E }{\partial w_{jk}} = \color{purple}{\delta_k} \color{green}{a_j} \tag{6}&lt;/script&gt;

&lt;p&gt;Here the &lt;script type=&quot;math/tex&quot;&gt;\delta_k&lt;/script&gt; terms can be interpreted as the network output error after being “backpropagated” through the output activation function &lt;script type=&quot;math/tex&quot;&gt;g_k&lt;/script&gt;, thus creating an “error signal”. Loosely speaking, &lt;em&gt;Equation 6&lt;/em&gt; can be interpreted as determining how much each &lt;script type=&quot;math/tex&quot;&gt;w_{jk}&lt;/script&gt; contributes to the error signal by weighting the error by the magnitude of the output activation from the previous (hidden) layer. The gradients with respect to each &lt;script type=&quot;math/tex&quot;&gt;w_{jk}&lt;/script&gt; are thus considered to be the “contribution” of that parameter to the total error signal and should be “negated” during learning. This gives the following gradient descent update rule for the output layer weights:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
w_{jk} &amp;\leftarrow w_{jk} - \eta \frac{\partial E }{\partial w_{jk}} \\
&amp;\leftarrow w_{jk} - \eta (\color{purple}{\delta_k} \color{green}{a_j}) \tag{7}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;\eta&lt;/script&gt; is some step size, often referred to as the “learning rate”. Similar update rules are used to update the remaining parameters, once &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial E}{\partial \theta}&lt;/script&gt; has been determined.&lt;/p&gt;

&lt;p&gt;As we’ll see shortly, the process of “backpropagating” the error signal can repeated all the way back to the input layer by successively projecting &lt;script type=&quot;math/tex&quot;&gt;\delta_k&lt;/script&gt; back through &lt;script type=&quot;math/tex&quot;&gt;w_{jk}&lt;/script&gt;, then through the activation function &lt;script type=&quot;math/tex&quot;&gt;g'_j(z_j)&lt;/script&gt; for the hidden layer to give the error signal &lt;script type=&quot;math/tex&quot;&gt;\delta_j&lt;/script&gt;, and so on. This backpropagation concept is central to training neural networks with more than one layer.&lt;/p&gt;

&lt;h4 id=&quot;output-layer-biases-b_k&quot;&gt;Output layer biases, &lt;script type=&quot;math/tex&quot;&gt;b_{k}&lt;/script&gt;&lt;/h4&gt;
&lt;p&gt;As for the gradient of the error function with respect to the output layer biases, we follow the same routine as above for &lt;script type=&quot;math/tex&quot;&gt;w_{jk}&lt;/script&gt;. However, the third term in &lt;em&gt;Equation 3&lt;/em&gt; is &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial}{\partial b_k} z_k = \frac{\partial}{\partial b_k} \left[ b_k + \sum_j g_j(z_j)\right] = 1&lt;/script&gt;, giving the following gradient for the output biases:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial E }{\partial b_k} &amp;= (a_k - t_k)g_k'(z_k)(1) \\
&amp;= \color{purple}{\delta_k} \tag{8}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Thus the gradient for the biases is simply the back-propagated error signal &lt;script type=&quot;math/tex&quot;&gt;\delta_k&lt;/script&gt; from the output units. One interpretation of this is that the biases are weights on activations that are always equal to one, regardless of the feed-forward signal. Thus the bias gradients aren’t affected by the feed-forward signal, only by the error.&lt;/p&gt;

&lt;h1 id=&quot;gradients-for-hidden-layer-parameters&quot;&gt;Gradients for Hidden Layer Parameters&lt;/h1&gt;

&lt;p&gt;Now that we’ve derived the gradients for the output layer parameters and established the notion of backpropagation, let’s continue with this information in hand in order to derive the gradients for the remaining layers.&lt;/p&gt;

&lt;h4 id=&quot;hidden-layer-connection-weights-w_ij&quot;&gt;Hidden layer connection weights, &lt;script type=&quot;math/tex&quot;&gt;w_{ij}&lt;/script&gt;&lt;/h4&gt;

&lt;p&gt;Due to the indirect affect of the hidden layer on the output error, calculating the gradients for the hidden layer weights &lt;script type=&quot;math/tex&quot;&gt;w_{ij}&lt;/script&gt; is somewhat more involved. However, the process starts just the same as for the output layer &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial E }{\partial w_{ij}} &amp;= \frac{1}{2} \sum_{k}(a_k - t_k)^2 \\
&amp;= \sum_{k} (a_k - t_k) \frac{\partial}{\partial w_{ij}}a_k \tag{9}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Continuing on, noting that &lt;script type=&quot;math/tex&quot;&gt;a_k = g_k(z_k)&lt;/script&gt; and again applying chain rule, we obtain:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial E }{\partial w_{ij}} &amp;= \sum_{k} (a_k - t_k) \frac{\partial }{\partial w_{ij}}g_k(z_k) \\
&amp;= \sum_{k} (a_k - t_k)g'_k(z_k)\frac{\partial }{\partial w_{ij}}z_k \tag{10}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Ok, now here’s where things get &lt;em&gt;slightly more involved&lt;/em&gt;. Notice that the partial derivative &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial }{\partial w_{ij}}z_k&lt;/script&gt; in &lt;em&gt;Equation 10&lt;/em&gt; is with respect to &lt;script type=&quot;math/tex&quot;&gt;w_{ij}&lt;/script&gt;, but the target &lt;script type=&quot;math/tex&quot;&gt;z_k&lt;/script&gt; is a function of index &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;. How the heck do we deal with that!? If we expand &lt;script type=&quot;math/tex&quot;&gt;z_k&lt;/script&gt; a little, we find that it is composed of other sub functions:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align} z_k &amp;= b_k + \sum_j a_jw_{jk} \\
&amp;= b_k + \sum_j g_j(z_j)w_{jk} \\
&amp;= b_k + \sum_j g_j(b_i + \sum_i a_i w_{ij})w_{jk} \tag{11}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;From &lt;em&gt;Equation 11&lt;/em&gt; we see that &lt;script type=&quot;math/tex&quot;&gt;z_k&lt;/script&gt; is indirectly dependent on &lt;script type=&quot;math/tex&quot;&gt;w_{ij}&lt;/script&gt;. &lt;em&gt;Equation 10&lt;/em&gt; also suggests that we can again use the chain rule to calculate &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial z_k }{\partial w_{ij}}&lt;/script&gt;. This is probably the trickiest part of the derivation, and also requires noting that &lt;script type=&quot;math/tex&quot;&gt;z_j = b_j + \sum_i a_jw_{ij}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;a_j=g_j(z_j)&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial z_k }{\partial w_{ij}} &amp;= \frac{\partial z_k}{\partial a_j}\frac{\partial a_j}{\partial w_{ij}} \\
&amp;= \frac{\partial}{\partial a_j} (b_k + \sum_j a_jw_{jk}) \frac{\partial a_j}{\partial w_{ij}} \\
&amp;= w_{jk}\frac{\partial a_j}{\partial w_{ij}} \\
&amp;= w_{jk}\frac{\partial g_j(z_j)}{\partial w_{ij}} \\
&amp;= w_{jk}g_j'(z_j)\frac{\partial z_j}{\partial w_{ij}} \\
&amp;= w_{jk}g_j'(z_j)\frac{\partial}{\partial w_{ij}}(b_i + \sum_i a_i w_{ij}) \\
&amp;= w_{jk}g_j'(z_j)a_i \tag{12}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Now, plugging &lt;em&gt;Equation 12&lt;/em&gt; into &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial z_k}{\partial w_{ij}}&lt;/script&gt; into &lt;em&gt;Equation 10&lt;/em&gt; gives the following expression for &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial E}{\partial w_{ij}}&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial E }{\partial w_{ij}} &amp;= \sum_{k} (a_k - t_k)g'_k(z_k)w_{jk} g'_j(z_j)a_i \\
&amp;= \left(\sum_{k} \color{purple}{\delta_k} w_{jk} \right) \color{darkblue}{g'_j(z_j)}\color{darkgreen}{a_i} \tag{13}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Notice that the gradient for the hidden layer weights has a similar form to that of the gradient for the output layer weights. Namely the gradient is composed of three terms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the current layer’s activation function &lt;script type=&quot;math/tex&quot;&gt;\color{darkblue}{g'_j(z_j)}&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;the output activation signal from the layer below &lt;script type=&quot;math/tex&quot;&gt;\color{darkgreen}{a_i}&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;an error term  &lt;script type=&quot;math/tex&quot;&gt;\sum_{k} \color{purple}{\delta_k} w_{jk}&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the output layer weight gradients, the error term was simply the difference in the target and output layer activations &lt;script type=&quot;math/tex&quot;&gt;\color{red}{a_k - t_k}&lt;/script&gt;. Here, the error term includes not only the output layer error signal, &lt;script type=&quot;math/tex&quot;&gt;\delta_k&lt;/script&gt;, but this error signal is further projected onto &lt;script type=&quot;math/tex&quot;&gt;w_{jk}&lt;/script&gt;. Analogous to the output layer weights, the gradient for the hidden layer weights can be interpreted as a proxy for the “contribution” of the weights to the output error signal. However, for hidden layers, this error can only be “observed” from the point-of-view of the weights by backpropagating the error signal through the layers above the hidden layer.&lt;/p&gt;

&lt;p&gt;To make this idea more explicit, we can define the resulting error signal backpropagated to layer &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; as &lt;script type=&quot;math/tex&quot;&gt;\delta_j&lt;/script&gt;, which includes all terms in &lt;em&gt;Equation 13&lt;/em&gt; that involve index &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;. This definition results in the following gradient for the hidden unit weights:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\color{darkred}{\delta_j} = \color{darkblue}{g'_j(z_j)} \sum_{k} \color{purple}{\delta_k} w_{jk} \tag{14}&lt;/script&gt;

&lt;p&gt;Thus giving the final expression for the gradient:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial E }{\partial w_{ij}} = \color{darkred}{\delta_j}\color{darkgreen}{a_i}  \tag{15}&lt;/script&gt;

&lt;p&gt;&lt;em&gt;Equation 15&lt;/em&gt; suggests that &lt;strong&gt;&lt;em&gt;in order to calculate the weight gradients at any layer &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt; in an arbitrarily-deep neural network, we simply need to calculate the backpropagated error signal &lt;script type=&quot;math/tex&quot;&gt;\delta_l&lt;/script&gt; that reaches that layer from the “above” layers, and weight it by the feed-forward signal &lt;script type=&quot;math/tex&quot;&gt;a_{l-1}&lt;/script&gt; feeding into that layer.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;hidden-layer-biases-b_i&quot;&gt;Hidden Layer Biases, &lt;script type=&quot;math/tex&quot;&gt;b_i&lt;/script&gt;&lt;/h4&gt;

&lt;p&gt;Calculating the error gradients with respect to the hidden layer biases follows a very similar procedure to that for the hidden layer weights where, as in &lt;em&gt;Equation 12&lt;/em&gt;, we use the chain rule to calculate &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial z_k}{\partial b_i}&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}

\frac{\partial E }{\partial b_{i}} &amp;= \sum_{k} (a_k - t_k) \frac{\partial }{\partial b_{i}}g_k(z_k) \\
&amp;= \sum_{k} (a_k - t_k)g'_k(z_k)\frac{\partial z_k}{\partial b_{i}}  \tag{16}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Again, using the chain rule to solve for &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial z_k }{\partial b_{i}}&lt;/script&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial z_k  }{\partial b_{i}} &amp;= \frac{\partial z_k}{\partial a_j}\frac{\partial a_j}{\partial b_{i}} \\
&amp;= \frac{\partial}{\partial a_j}(b_j + \sum_j a_j w_{jk})\frac{\partial a_j}{\partial b_{i}} \\
&amp;= w_{jk}\frac{\partial a_j}{\partial b_{i}} \\
&amp;= w_{jk}\frac{\partial g_j(z_j)}{\partial b_{i}} \\
&amp;= w_{jk}g_j'(z_j)\frac{\partial z_j}{\partial b_{i}} \\
&amp;= w_{jk}g_j'(z_j)\frac{\partial}{\partial b_i}(b_i + \sum_i a_i w_{ij}) \\
&amp;= w_{jk}g_j'(z_j)(1) \tag{17}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Plugging &lt;em&gt;Equation 17&lt;/em&gt; into the expression for &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial z_k }{\partial b_i}&lt;/script&gt; in &lt;em&gt;Equation 16&lt;/em&gt; gives the final expression for the hidden layer bias gradients:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial E }{\partial b_i} &amp;= \sum_{k} (a_k - t_k)g'_k(z_k) w_{jk} g_j'(z_j) \\
&amp;= g'_j(z_j) \sum_{k} \delta_k w_{jk} \\
&amp;= \color{darkred}{\delta_j} \tag{18}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;In a similar fashion to calculation of the bias gradients for the output layer, the gradients for the hidden layer biases are simply the backpropagated error signal reaching that layer. This suggests that we can also calculate the bias gradients at any layer &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt; in an arbitrarily-deep network by simply calculating the backpropagated error signal reaching that layer &lt;script type=&quot;math/tex&quot;&gt;\delta_l&lt;/script&gt;. Pretty cool!&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;In this post we went over some of the formal details of the backpropagation learning algorithm. The math covered in this post allows us to train arbitrarily deep neural networks by re-applying the same basic computations. In a later post, we’ll go a bit deeper in implementation and applications of neural networks, referencing this post for the formal development of the underlying calculus required for gradient descent.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;notes&quot;&gt;Notes&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Though, I guess these days with autograd, who &lt;em&gt;really&lt;/em&gt; needs to understand how the calculus for gradient descent works, amiright? (&lt;em&gt;hint&lt;/em&gt;: that is a joke) &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;You may also notice that the summation disappears in the derivative. This is because when we take the partial derivative with respect to the &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;-th dimension/node. Therefore the only term that survives in the error gradient is the &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;-th, and we can thus ignore the remaining terms in the summation. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Notice here that the sum does &lt;em&gt;not&lt;/em&gt; disappear in the derivative as it did for the output layer parameters. This is due to the fact that the hidden layers are fully connected, and thus each of the hidden unit outputs affects the state of each output unit. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
        </entry>
    
</feed>
